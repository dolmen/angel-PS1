#!/usr/bin/perl
use utf8;

#    Copyright © 2013 Olivier Mengué
#    Original source code is available at https://github.com/dolmen/angel-prompt
#
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.



use 5.008003;  # 5.010 is the sane minimum
use strict;
use warnings;

package Angel::Prompt;

use Getopt::Long;
use File::Temp 'tmpnam';
use Encode ();
use IPC::Open3 ();
use Symbol 'gensym';

use lib "$ENV{HOME}/.config/angel-prompt", '/etc/angel-prompt';


# Extact encoding name from the locale
our $ENCODING = do {
    # Shortcut for the most common case
    my $locale = $ENV{LC_ALL} || $ENV{LC_CTYPE} || $ENV{LANG};
    $locale =~ /\.UTF-8(?:@.)?/i
        ? 'UTF-8'
        : do {
            # warn "slow locale lookup...";
            require POSIX;
            POSIX::setlocale(POSIX::LC_CTYPE(), '');
            require I18N::Langinfo;
            eval { I18N::Langinfo::langinfo(I18N::Langinfo::CODESET()) }
                or do { warn $@; undef }
        }
};

# Decode @ARGV and encode STDOUT, STDERR
if ($ENCODING) {
    my $encoding_obj = Encode::find_encoding($ENCODING);
    map { $_ = $encoding_obj->decode($_) } @ARGV;
    binmode(STDOUT, ":encoding($ENCODING)");
    binmode(STDERR, ":encoding($ENCODING)");
}

our $DEBUG = $ENV{APS1_DEBUG};
our $SHELL;
our $NAME = 'angel';
our $VERBOSE = 0;
our $SHELL_PPID = getppid();
our $TERM = $ENV{TERM};

my %SUPPORTED_SHELLS = map { ($_ => undef) } qw(bash zsh);

{
    my @PATH = split /:/, $ENV{'PATH'};
    my %which;

    sub which ($)
    {
        my ($name, $no_cache) = @_;

        # Use the cache
        return $which{$name} if exists $which{$name};
        # Already a path with a directory?
        return $name if index($name, '/') >= 0;

        # Search in $PATH
        foreach my $p (@PATH) {
            my $f = "$p/$name";
            if (-x $f && ! -d _) {
                $which{$name} = $f unless $no_cache;
                return $f;
            }
        }
        undef
    }
}

sub run
{
    my $command = which(shift);
    my ($in, $out);
    my $err = gensym;
    my $pid = IPC::Open3::open3(
        $in,
        $out,
        $err,
        $command,
        @_
    );
    my $result = do { undef $/; readline $out };
    # TODO UTF-8 decoding
    waitpid($pid, 0);
    return $result
}

sub one_line
{
    # chop
    (my $result = shift) =~ s{\n$}{}s;
    $result
}

sub terminfo ($;@); # Pre-declare for recursion

my %terminfo_cache;

sub terminfo ($;@)
{
    my ($capability, @args) = @_;
    if (ref $capability) {
        my $cap0 = $capability->[0];
        if (exists $terminfo_cache{$cap0}) {
            return terminfo $terminfo_cache{$cap0}, @args
        }
        for my $cap (@$capability) {
            my $res = terminfo $cap, @args;
            next if $res eq '';
            $terminfo_cache{$cap0} = $cap if $cap ne $cap0;
            return $res
        }
        return '';
    }

    #print STDERR "[$capability]\n";

    run(tput => $capability, @args);

    # We could cache the result:
    #   $terminfo{join('\0', $capability, @args)} = $result
}

sub setaf ($) { terminfo [ qw(setaf AF) ], $_[0] }

my ($BLACK, $RED, $GREEN, $YELLOW, $BLUE, $MAGENTA, $CYAN, $GRAY) =
    map { setaf $_ } 0..7;
my $BOLD = terminfo [ qw(bold md) ];
my $NO_COLOR = terminfo [ qw(sgr0 me) ];
my ($B, $E) = ('\[', '\]');

sub interp
{
    my $options = shift;
    my @args = @_;
    for(my $i=0; $i<=$#args; $i++) {
        if (ref($args[$i]) eq 'CODE') {
            splice @args, $i, 1, interp($options, $args[$i]->($options));
            redo;
        }
    }
    return @args
}

sub compact
{
    my @template = @_;
    my @out;
    while (@template) {
        my $v = shift @template;
        my $r = ref $v;
        # Reference followed by a scalar => replace by the expanded result
        if ($r eq 'SCALAR' && @template && !ref $template[0]) {
            $v = expand($v, shift @template);
            $r = ref $v;
        }
        if (!$r && (@out >= 1 && !ref($out[$#out]))
                && (@out  > 1 && !ref($out[$#out-1]))) {
            $out[$#out] .= $v
        } else {
            push @out, $v
        }
    }
    @out
}

sub expand
{
    my @args = @_;
    my $out = '';
    my $color;
    while (@args) {
        my $v = shift @args;
        my $r = ref $v;
        if ($r eq 'SCALAR') {
            # TODO also handle strings that don't start with \e as margins
            $color = $$v;
            $out .= $B . $color . $E;
        } else {
            $out .= $v;
            if (defined $color) {
                $out .= $B . $NO_COLOR . $E;
                undef $color;
            }
        }
    }
    return $out
}

my @INCLUDES;

GetOptions(
    'shell=s' => \$SHELL,
    'name=s' => \$NAME,
    'v|verbose' => \$VERBOSE,
    'debug'  => \$DEBUG,
    'I=s' => \@INCLUDES,
);

# Order is important: preserve the order as perl itself
lib->import(@INCLUDES);
undef @INCLUDES;

# FIXME extract the name of $PPID instead of $SHELL
unless ($SHELL) {
    $SHELL = $ENV{SHELL};
    $SHELL =~ s{^.*/}{};
} else {
    $SHELL =~ s/^-//;
}

# The angel name must be a valid shell function identifier
# Note that '-' is allowed, even as a first char
$NAME =~ /^[-A-Z_][-A-Z_0-9]*$/si or die "invalid angel name";


my $FIFO_PATH = tmpnam().".$$";
my $FIFO_IN = "$FIFO_PATH.in";
my $FIFO_OUT = "$FIFO_PATH.out";

if (-t STDOUT) {
    die "TERM is not set\n" unless exists $ENV{'TERM'} && $ENV{'TERM'} ne '';

    unless ($ENCODING) {
        print STDERR "Encoding not set in locale. Please set LC_CTYPE.\n";
    } elsif ($ENCODING !~ /^UTF-/i) {
        # Get the canonical name
        $ENCODING = Encode::find_encoding($ENCODING)->name;
        print STDERR "Your locale is not set to a known Unicode encoding (such as 'UTF-8') but to '$ENCODING'. Please report your use case to the Angel Prompt developers.\n"
    }

    #print "${RED}Red!${NO_COLOR}\n";

    print "Copyright (C) 2013  Olivier Mengué\n",
          "This program comes with ABSOLUTELY NO WARRANTY;\n",
          "This is free software, and you are welcome to redistribute it\n",
          "under certain conditions;\n",
          "See \"sed -n '4,19{s/.//;p}' \$(which $0)\" for details.\n\n",
    print STDERR "usage: eval `angel-prompt --shell=\$0`\n";

    #print "\@INC:\n  - ", join("\n  - ", @INC), "\n";

    exit 1;
}

# *****************************************************************************
# Angel startup
# *****************************************************************************

# No terminal? This is not an interactive shell.
# So we don't install.
exit 0 unless -t STDIN && exists $ENV{'TERM'} && $ENV{'TERM'} ne '';

$SHELL eq 'bash' or die "Your shell ($SHELL) is not (yet?) supported.\n";

require POSIX;
POSIX::mkfifo($FIFO_IN, 0600) or die "Can't create fifo $FIFO_IN: $!";
POSIX::mkfifo($FIFO_OUT, 0600) or die "Can't create fifo $FIFO_OUT: $!";

# The shell code will be evaluated with eval as a single line
# so statements must be properly terminated with ';'
# No shell comments allowed
my $shell_debug = $DEBUG ? q|printf 'DEBUG> PS1=%q\\n' "\$PS1" ; | : '';
print <<EOF;
[[ -n "\$APS1_NAME" ]] && \$APS1_NAME leave;
APS1_PS1="\$PS1";
APS1_PROMPT_COMMAND="\$PROMPT_COMMAND";
angel-PS1()
{
    local err=\$?;
    [[ -e '$FIFO_IN' ]] || { $NAME leave ; return ; };
    printf '%s\\0%s\\0%s' "?=\$err" "PWD=\$PWD" > '$FIFO_IN' || { $NAME leave ; return ; };
    read PS1 < '$FIFO_OUT' || $NAME leave ;
    $shell_debug
} ;
PROMPT_COMMAND=angel-PS1 ;
APS1_NAME=$NAME ;
$NAME()
{
    case "\$1" in
    leave|quit|go-away)
        PROMPT_COMMAND="\$APS1_PROMPT_COMMAND" ;
        PS1="\$APS1_PS1" ;
        kill \$APS1_PID 2>/dev/null ;
        rm -f -- '$FIFO_IN' '$FIFO_OUT' ;
        unset APS1_PS1 APS1_PID APS1_NAME ;
        unset -f $NAME angel-PS1 ;;
    mute|off)
        PROMPT_COMMAND="\$APS1_PROMPT_COMMAND" ;
        PS1="\$APS1_PS1" ;;
    unmute|on)
        PROMPT_COMMAND=angel-PS1 ;;
    *)
        echo 'What?' >&2 ;
        return 1 ;;
    esac ;
} ;
EOF
# TODO: exit trap to kill the daemon

(my $TTYNAME = POSIX::ttyname(0)) =~ s{^/dev/}{};

close STDIN;

my $child = fork();
die if $child == -1;
if ($child) {
    # We don't want the fifos to be removed by the END block
    undef $FIFO_IN;
    undef $FIFO_OUT;
    print "APS1_PID=$child\n";
    print STDERR "angel-prompt $child installed.\n";
    exit 0;
}

# *****************************************************************************
# Angel forked
# *****************************************************************************

open STDIN, '+<', '/dev/null';
close STDOUT;
open STDOUT, '>', '/dev/null';


# Ignore ^C sent to the terminal
$SIG{INT} = sub {
    print STDERR "Ctrl+C !\n";
    #exit 0;
};
# Clean exits that will call our END block
$SIG{HUP} = $SIG{TERM} = sub { exit 0 };

# Terminal size change
# TODO: compute $COLUMNS and $LINES
#$SIG{WINCH} = sub { print STDERR "WINCH!\n" };


sub MarginLeft
{
    my $code = pop;
    my $margin = shift;
    $margin = ' ' unless defined $margin;
    sub {
        my @result = interp $code;
        return unless @result;
        ($margin, @result)
    }
}


my $git = which 'git';
sub git
{
    # All Git commands we call return a single line. We don't want '\n'
    one_line(run $git, @_)
}

sub GitInfo
{
    my $options = shift;

    my $git_dir = "$options->{'PWD'}/.git";
    unless (-d $git_dir) {
        ($git_dir = git qw(rev-parse --git-dir))
            or return;
    }
    local $ENV{'GIT_DIR'} = $git_dir;

    my @out;
    my $local_commits = 0;

    my $branch = git 'symbolic-ref', 'HEAD';
    if ($branch eq '') {
        ($branch = git 'rev-parse', '--short')
            or return;
    } else {
        $branch =~ s{^refs/heads/}{};

        # Count the number of commits to push ($local_commits)
        if ((my $remote_branch = git qw(config --get), "branch.$branch.merge")
            && (my $remote = git qw(config --get), "branch.$branch.remote")) {

            # Compute the ref of our local image of the remote branch
            (my $remote_branch_ref = $remote_branch) =~ s{^refs/heads/}{refs/remotes/$remote/};

            # Count the commits
            $local_commits =
                git(qw(rev-list --no-merges --count),
                    "$remote_branch_ref..HEAD")
                || 0;
        }
    }

    if (my $shortstat = git qw(diff --shortstat)) {
        my ($ins) = ($shortstat =~ /([0-9]+) insertions?\(/);
        my ($del) = ($shortstat =~ /([0-9]+) deletions?\(/);

        push @out,
            \$RED, $branch, \$NO_COLOR,
            '(',
                \$MAGENTA,
                ($ins ? ("+$ins" . ($del ? "/" : '')) : '') . ($del ? "-$del" : ''),
                ($local_commits ? (\$NO_COLOR, ',', \$YELLOW, $local_commits) : ()),
                \$NO_COLOR,
            ')';
    } elsif ($local_commits) {
        push @out,
            \$YELLOW, $branch, \$NO_COLOR,
            '(', \$YELLOW, $local_commits, \$NO_COLOR, ')';
    } else {
        push @out, \$GREEN, $branch, \$NO_COLOR;
    }

    # TODO untracked files

    if (-f "$git_dir/refs/stash") {
        push @out, \$RED, '+', \$NO_COLOR;
    }

    # TODO Git mark

    @out, ' '
}


my @USER_MARK = ($< ? (\$BOLD, '\\$') : (\"$BOLD$RED", '#'));

my @PS1 = compact(
    \$BLUE,
    sub { sprintf('%3$02d:%2$02d:%1$02d', localtime) },
    ' ',
    $TTYNAME,
    ' ',
    sub { -w $_[0]->{PWD} ? (\$GREEN) : (\$RED) },
    ':',
    '\\w',
    ' ',
    \&GitInfo,
    sub { my $err = $_[0]->{'?'}; $err == 0 ? () : (\$RED, $err, ' ') },
    @USER_MARK,
    ' ',
);

#warn $_ for @PS1;

# *****************************************************************************
# Angel main loop
# *****************************************************************************
sub main_loop
{
    my @PS1 = @_;

    my $FIFO;
    for (;;) {
        unless (open $FIFO, "<:encoding($ENCODING)", $FIFO_IN) {
            redo if -e $FIFO_IN && -p _;
            last;
        }
        $_ = do { undef $/; <$FIFO> };
        close $FIFO;
        printf STDERR "DEBUG< %s\n", do { (my $tmp = $_) =~ s/\0/ /g; $tmp } if $DEBUG;

        my %opts = map { ( m/^(.*?)=(.*)/s ) } split /\0/;

        chdir $opts{'PWD'};

        my $PS1 = expand(interp(\%opts, @PS1));

        open $FIFO, ">:encoding($ENCODING)", $FIFO_OUT;
        # Escape the last space using bash PS1 encoding as 'read' removes spaces
        # at beginning and end of line
        (my $out = $PS1) =~ s/^ | $/\\040/g;
        # Escape \ as 'read' expands them
        $out =~ s/\\/\\\\/g;
        # Escape newlines
        $out =~ s/\n/\\\n/g;
        print $FIFO "$out\n";
        close $FIFO;
    }
}

main_loop(@PS1);

END {
    no warnings 'uninitialized';
    unlink $FIFO_IN, $FIFO_OUT;
}

# vim:set et ts=8 sw=4 sts=4:
