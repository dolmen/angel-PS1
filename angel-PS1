#!/usr/bin/env perl

#    Copyright © 2013 Olivier Mengué
#    Original source code is available at https://github.com/dolmen/angel-PS1
#
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#!/usr/bin/perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"AngelPS1.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1';
  package AngelPS1;
  
  our $VERSION = '0.93';
  
  1;
  __END__
  
  =encoding UTF-8
  
  =head1 NAME
  
  AngelPS1 - The Angel's Prompt
  
  =head1 SYNOPSIS
  
  Use C<L<angel-PS1>> in your shell:
  
      $ eval $(angel-PS1)
  
  Get the documentation:
  
      $ perldoc angel-PS1
  
  =head1 DESCRIPTION
  
  C<angel-PS1> is a prompt engine for your shell.
  
  The man page for L<angel-PS1> contains most of the high level documentation.
  This page is the index for documentation to go further in the C<angel-PS1>
  APIs to get the best of it!
  
  =head1 FAQ
  
  =head2 What is a I<shell prompt>?
  
  Look for I<C<PS1>> in your Bourne-like Unix shell (bash, zsh, ksh, dash...).
  
  =head2 How to write my own shell prompt using C<angel-PS1>?
  
  See L<AngelPS1::Prompt>.
  
  =head2 How can I share my prompt definition with other users?
  
  See L<AngelPS1::Prompt>.
  
  =head2 What is an C<angel-PS1> I<plugin>?
  
  A plugin for C<angel-PS1> is a kind of function library that can be re-used
  and shared. A plugin exports bricks that can be used to a customized
  C<angel-PS1> prompt.
  
  See for example L<AngelPS1::Plugin::Git>.
  
  
  Each of theese functions must return a list value that can be inserted in a
  prompt definition.
  
  =head2 How to write a plugin?
  
  A plugin is a classical Perl 5 package in a .pm file.
  See L<AngelPS1::Plugin> for details.
  
  =head2 How do I share plugins?
  
  Distributing them through CPAN can be convenient for Perl developers.
  
  Distributing just the .pm file will target a larger audience...
  
  =head2 What about C<angel-PS1> internals?
  
  Those APIs are documented (if they are :) ) only for developpers contributing
  to the core of L<angel-PS1>.
  
  See L<AngelPS1::Compiler> for how the prompt list in compiled into a prompt
  string.
  
  See L<AngelPS1::Shell> for pluggable shell support.
  
  See L<AngelPS1::System> for pluggable operating support for querying the system
  state in plugins.
  
  =head1 AUTHOR
  
  L<Olivier Mengué|mailto:dolmen@cpan.org>
  
  =head1 COPYRIGHT AND LICENSE
  
  `angel-PS1` itself is distributed under the GNU Affero General Public License
  version 3 or later. See the F<COPYING> file in the distribution for details.
  
  `angel-PS1` plugins must be distributed under the
  [Artistic License 2.0](http://opensource.org/licenses/Artistic-2.0).
  This basically allows to reuse the code of plugins either to improve the
  `angel-PS1` core or for any other usage in Perl programs, not just `angel-PS1`.
ANGELPS1

$fatpacked{"AngelPS1/Chrome.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_CHROME';
  use strict;
  use warnings;
  
  package AngelPS1::Chrome;
  
  # Pre-declare packages
  {
      package # no index: private package
          AngelPS1::Chrome::Color;
  }
  
  use Carp ();
  
  our @CARP_NOT = qw<
      AngelPS1::Chrome::Color
  >;
  
  # Private constructor for AngelPS1::Chrome objects. Lexical, so cross-packages.
  # Arguments:
  # - class name
  # - foreground color
  # - background color
  # - flags list
  my $Chrome = sub (*$$;@)
  {
      my ($class, @self) = @_;
  
      my $fg = $self[0];
      Carp::croak "invalid fg color $fg"
          if defined($fg) && ($fg < 0 || $fg > 255);
      my $bg = $self[1];
      Carp::croak "invalid bg color $bg"
          if defined($bg) && ($bg < 0 || $bg > 255);
      # TODO check flags
  
      bless \@self, $class
  };
  
  
  # Cache for color objects
  my %COLOR_CACHE;
  
  sub color ($)
  {
      my $color = shift;
      die "invalid color" if ref $color;
      #return $Chrome->(AngelPS1::Chrome::Color::, $color, undef);
      $COLOR_CACHE{chr($color)} ||=
          $Chrome->(AngelPS1::Chrome::Color::, $color, undef);
  }
  
  
  use Exporter 5.57 'import';  # perl 5.8.3
  
  #our @EXPORT_OK;
  #BEGIN { our @EXPORT_OK = ('color'); }
  
  {
      my $mk_flag = sub { $Chrome->(AngelPS1::Chrome::, undef, undef, $_[0]) };
  
      my %const = (
          Reset      => $mk_flag->(''),
          ResetFg    => $mk_flag->(39),
          ResetBg    => $mk_flag->(49),
          ResetFlags => $mk_flag->(22),
          Standout   => $mk_flag->(7),
          Underline  => $mk_flag->(4),
          Reverse    => $mk_flag->(7),
          Blink      => $mk_flag->(5),
          Bold       => $mk_flag->(1),
  
          Black      => color 0,
          Red        => color 1,
          Green      => color 2,
          Yellow     => color 3,
          Blue       => color 4,
          Magenta    => color 5,
          Cyan       => color 6,
          White      => color 7,
  
          # Larry Wall's favorite color
          # The true 'chartreuse' color from X11 colors is #7fff00
          # The xterm-256 color #118 is near: #87ff00
          Chartreuse => color 118,
      );
  
      our @EXPORT = ('color', keys %const);
  
      if ($^V lt v5.16.0) {
          while (my ($name, $value) = each %const) {
              no strict 'refs';
              *$name = sub () { $value };
          }
      } else {
          require constant;
          constant->import(\%const);
      }
  }
  
  use overload
      '""' => 'term',
      '+'  => 'plus',
      '${}' => 'deref',
  ;
  
  sub term
  {
      my $self = shift;
      my ($fg, $bg) = @{$self}[0, 1];
      my $r = join(';', @{$self}[2 .. $#$self]);
      if (defined($fg) || defined($bg)) {
          $r .= ';' if @$self > 2;
          if (defined $fg) {
              $r .= $fg < 8 ? (30+$fg) : $fg < 16 ? "9$fg" : "38;5;$fg";
              $r .= ';' if defined $bg;
          }
          $r .= $bg < 8 ? (40+$bg) : $bg < 16 ? "10$bg" : "48;5;$bg" if defined $bg;
      }
      "\e[${r}m"
  }
  
  sub clone
  {
      bless [ @{$_[0]} ], __PACKAGE__
  }
  
  sub plus
  {
      my ($self, $other, $swap) = @_;
  
      die 'invalid value for +' unless $other->isa(__PACKAGE__);
  
      my @new = @$self;
      $new[0] = $other->[0] if defined $other->[0];
      $new[1] = $other->[1] if defined $other->[1];
      push @new, @{$other}[2 .. $#$other];
  
      bless \@new, __PACKAGE__
  }
  
  sub deref
  {
      \("$_[0]")
  }
  
  package # no index: private package
      AngelPS1::Chrome::Color;
  
  our @ISA = (AngelPS1::Chrome::);
  
  use overload
      '/'   => 'over',
      # Even if overloading is set in the super class, we have to repeat it for old perls
      (
          $^V ge v5.18.0
          ? ()
          : (
              '""'  => \&AngelPS1::Chrome::term,
              '+'   => \&AngelPS1::Chrome::plus,
              '${}' => \&AngelPS1::Chrome::deref,
          )
      ),
  ;
  
  sub over
  {
      die 'invalid bg color for /' unless ref($_[1]) eq AngelPS1::Chrome::Color::;
      $Chrome->(AngelPS1::Chrome::, $_[0]->[0], $_[1]->[0])
  }
  
  1;
  __END__
  
  =head1 NAME
  
  AngelPS1::Chrome - DSL for colors and other terminal chrome
  
  =head1 SYNOPSIS
  
      use AngelPS1::Chrome qw<Red Blue Bold Reset color>;
  
      # Base color constant and attribute
      say Red, 'red text', Reset;
  
      # Composition, using operator overloading
      say Red/Blue+Bold, 'red on blue', Reset;
  
      # Extended xterm-256 colors
      say color(125) + Underline, 'Purple', Reset
  
      # Define your own constants
      use constant Pink => color 213;
  
      # Use ${} around Chrome expression inside strings
      say "normal ${ Red+Bold } RED ${ +Reset } normal";
  
  =head1 DESCRIPTION
  
  C<AngelPS1::Chrome> is a domain-specific language (DSL) for terminal decoration
  (colors and other attributes).
  
  In the current implementation stringification to ANSI sequences for C<xterm>
  and C<xterm-256> is hard-coded (which means it doesn't use the L<terminfo(5)>
  database), but this gives optimized (short) strings.
  
  =head1 EXPORTS
  
  =head2 Functions
  
  C<color(I<0-255>)>
  
  Build a L<AngelPS1::Chrome> object with the given color number. You can use this
  constructor to create your own set of color constants.
  
  For example, C<color(0)> gives the same result as C<Black> (but not the same
  object).
  
  =head2 Colors
  
  =over 4
  
  =item *
  
  C<Black>
  
  =item *
  
  C<Red>
  
  =item *
  
  C<Green>
  
  =item *
  
  C<Yellow>
  
  =item *
  
  C<Blue>
  
  =item *
  
  C<Magenta>
  
  =item *
  
  C<Cyan>
  
  =item *
  
  C<White>
  
  =cut
  
  # Secret: Chartreuse
  
  =back
  
  =head2 Flags
  
  The exact rendering of each flag is dependent on how the terminal implements
  them. For example C<Underline> and C<Blink> may do nothing.
  
  =over 4
  
  =item *
  
  C<Reset> : reset all colors and flags
  
  =item *
  
  C<Bold>
  
  =item *
  
  C<Underline>
  
  =item *
  
  C<Blink>
  
  =item *
  
  C<Reverse>
  
  =back
  
  =head1 SEE ALSO
  
  L<AngelPS1::Compiler>: the C<angel-PS1> compiler has special support for
  C<AngelPS1::Chrome> values.
  
  =head1 TRIVIA
  
  Did you know that I<chartreuse> is one of the favorite color of Larry Wall?
  
  =head1 AUTHOR
  
  Olivier MenguE<eacute>, L<mailto:dolmen@cpan.org>
  
  =cut
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_CHROME

$fatpacked{"AngelPS1/Compiler.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_COMPILER';
  use strict;
  use warnings;
  
  package AngelPS1::Compiler;
  
  use Exporter 'import';
  our @EXPORT = qw< reduce expand ps1_is_static >;
  
  use AngelPS1::Shell ();
  use AngelPS1::Chrome ();
  use Scalar::Util ();
  
  
  sub expand
  {
      my $state = shift;
      die "expand(): invalid arg" unless ref($state) eq 'HASH';
      my @args = @_;
      LOOP: for(my $i=0; $i<=$#args; $i++) {
          #warn $i;
          my $r = ref $args[$i];
          if ($r eq 'CODE') {
              #use B 'svref_2object';
              #my $GV = svref_2object($args[$i])->GV;
              #warn('expanding sub '.$GV->SAFENAME.' defined at '.$GV->FILE.' line '.$GV->LINE);
              #undef $GV;
              my @tmp = $args[$i]->($state);
              splice @args, $i, 1, @tmp;
              #warn "OK";
              redo LOOP; # A dynamic part can return dynamic parts!
          } elsif ($r eq 'ARRAY') {
              $args[$i] = [ expand($state, @{$args[$i]}) ];
          }
      }
      return @args
  }
  
  sub reduce;
  
  # Reduce a @PS1 definition:
  # - bare scalar are expanded to their escaped result
  # - scalar refs are concatenated
  # - colors (ARRAY) are expanded
  # - CODE refs are preserved as is (for multiple step compilation)
  # In scalar context the result of that process is expected to be a single
  # scalar ref (which implies that no CODE appeared in the original arguments)
  # and that dereferenced scalar is returned.
  sub reduce
  {
      my @template = @_;
      my @out;
      LOOP: while (@template) {
          my $v = shift @template;
          if (my $r = ref $v) {
              # Scalar refs are for raw (non-escaped) strings
              if ($r eq 'SCALAR') {
                  $v = $$v;
              }
              # => replace by the colored expanded result
              elsif (Scalar::Util::blessed($v) && $v->isa('AngelPS1::Chrome')) {
                  if (@template && ref($template[0]) eq 'ARRAY') {
                      unshift @template,
                          AngelPS1::Shell->ps1_invisible($v->term),
                          # flatten the ARRAY
                          @{ shift @template },
                          # close the colored part with a Reset
                          AngelPS1::Shell->ps1_invisible(AngelPS1::Chrome::Reset->term);
                  } else {
                      # Expand the color
                      unshift @template, AngelPS1::Shell->ps1_invisible($v->term);
                  }
                  redo LOOP;
              } else {
                  if (wantarray) {
                      # Keep subs as they must be explicitely expanded using expand()
                      if ($r eq 'CODE') {
                          push @out, $v;
                          next LOOP;
                      # Array refs are only expanded after a chrome spec. See below
                      } elsif ($r eq 'ARRAY') {
                          push @out, [ reduce(@$v) ];
                          next LOOP;
                      }
                  }
                  warn "unexpected $r item in prompt\n";
                  next LOOP;
              }
          } else {
              $v = AngelPS1::Shell->ps1_escape($v);
          }
          if (@out && ref($out[-1]) eq 'SCALAR') {
              ${$out[-1]} .= $v
          } else {  # CODE refs (and anything else) are preserved
              push @out, \$v;
          }
      }
      return @out if wantarray;
      return '' unless @out;
      die "invalid state after reduce: @out\n" if @out != 1 || ref $out[0] ne 'SCALAR';
      ${pop @out}
  }
  
  
  sub ps1_is_static
  {
      my $PS1 = shift;
      $#$PS1 == 0 && (ref $PS1->[0]) eq 'SCALAR'
  }
  
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_COMPILER

$fatpacked{"AngelPS1/Plugin.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_PLUGIN';
  use strict;
  use warnings;
  
  package AngelPS1::Plugin;
  
  #our $VERSION = $AngelPS1::VERSION;
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_PLUGIN

$fatpacked{"AngelPS1/Plugin/Core.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_PLUGIN_CORE';
  use strict;
  use warnings;
  
  package AngelPS1::Plugin::Core;
  
  our $VERSION = $AngelPS1::VERSION;
  
  use Exporter 5.57 'import';
  our @EXPORT = qw(Escape MarginLeft);
  
  use AngelPS1::Compiler;
  
  
  
  sub MarginLeft ($;$)
  {
      my $code = pop;
      if (!ref($code)) {
          return length($code) ? " $code" : $code;
      }
      die 'MarginLeft: not a CODEREF' unless ref($code) eq 'CODE';
      my @margin = @_;
      @margin = (' ') unless @margin;
      sub {
          my @result = expand(@_, $code);
          return unless @result;
          (@margin, @result)
      }
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_PLUGIN_CORE

$fatpacked{"AngelPS1/Plugin/DateTime.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_PLUGIN_DATETIME';
  use strict;
  use warnings;
  
  package AngelPS1::Plugin::DateTime;
  
  use Exporter 'import';
  our @EXPORT = qw< Time StrFTime >;
  
  sub Time ()
  {
      # FIXME this does not take in account if the user changes $ENV{TZ} in the
      # shell
      # TODO provoke an angel reload in that case
  
      sub { sprintf('%3$02d:%2$02d:%1$02d', localtime) }
  }
  
  sub StrFTime ($)
  {
      my $format = shift;
  
      require POSIX;
      sub { POSIX::strftime($format, localtime) }
  }
  
  '$'
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_PLUGIN_DATETIME

$fatpacked{"AngelPS1/Plugin/Git.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_PLUGIN_GIT';
  use strict;
  use warnings;
  
  package AngelPS1::Plugin::Git;
  
  use Exporter 5.57 'import';
  BEGIN {
      our $VERSION = $AngelPS1::VERSION;
      our @EXPORT = qw(GitInfo);
  }
  
  use AngelPS1::Util qw< which run one_line >;
  use AngelPS1::Chrome;
  
  my $git = eval { which 'git' };
  sub git
  {
      # All Git commands we call return a single line. We don't want '\n'
      one_line(run $git, @_)
  }
  
  sub GitInfo
  {
      unless ($git) {
          warn "'git' not found in PATH";
          return
      }
  
      # Cleanup the environment
      # This is done globally!
      delete @ENV{qw< GIT_DIR GIT_TRACE >};
  
      # Return a dynamic PS1 element
      sub {
          my $shell_state = shift;
  
          my $git_dir = "$shell_state->{'PWD'}/.git";
          unless (-d $git_dir) {
              ($git_dir = git qw(rev-parse --git-dir))
                  or return;
          }
          # This seems to be incompatible with "git diff --shortstat"
          #local $ENV{'GIT_DIR'} = $git_dir;
  
          my @out;
          my $local_commits = 0;
  
          my $branch = git 'symbolic-ref', 'HEAD';
          if ($branch eq '') {
              ($branch = git 'rev-parse', '--short')
                  or return;
          } else {
              $branch =~ s{^refs/heads/}{};
  
              # Count the number of commits to push ($local_commits)
              if ((my $remote_branch = git qw(config --get), "branch.$branch.merge")
                  && (my $remote = git qw(config --get), "branch.$branch.remote")) {
  
                  # Compute the ref of our local image of the remote branch
                  (my $remote_branch_ref = $remote_branch) =~ s{^refs/heads/}{refs/remotes/$remote/};
  
                  # Count the commits
                  $local_commits =
                      git(qw(rev-list --no-merges --count),
                          "$remote_branch_ref..HEAD")
                      || 0;
              }
          }
  
          my $status = git qw(status --porcelain -z);
          my $untracked = $status =~ /(?:^|\0)\?\? /s;
  
          if ((my $shortstat = git qw(diff --shortstat)) && ($? >> 8) == 0) {
              my ($ins) = ($shortstat =~ /([0-9]+) insertions?\(/);
              my ($del) = ($shortstat =~ /([0-9]+) deletions?\(/);
  
              push @out,
                  Red, [ $branch ],
                  '(',
                      Magenta,
                      [ ($ins ? ("+$ins" . ($del ? "/" : '')) : '') . ($del ? "-$del" : '') ],
                      ($local_commits ? (',', Yellow, [ $local_commits ]) : ()),
                  ')';
          } elsif ($local_commits) {
              push @out,
                  Yellow, [ $branch ],
                  '(', Yellow, [ $local_commits ], ')';
          } else {
              push @out, Green, [ $branch ];
          }
  
          if (-f "$git_dir/refs/stash") {
              push @out, Red, [ '+' ];
          }
  
          if ($untracked) {
              push @out, Red, [ '*' ];
          }
  
          # TODO Git mark
  
          @out, ' '
      }
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_PLUGIN_GIT

$fatpacked{"AngelPS1/Plugin/Term.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_PLUGIN_TERM';
  use strict;
  use warnings;
  
  package AngelPS1::Plugin::Term;
  
  our $VERSION = $AngelPS1::VERSION;
  
  use Exporter 5.57 'import';
  our @EXPORT = qw(TermTitle);
  
  use AngelPS1::Shell;
  
  use constant {
      TITLE_BEGIN => "\e]0;",
      TITLE_END   => "\a",
  };
  
  sub TermTitle
  {
      if (AngelPS1::Shell->name eq 'fish') {
          require Carp;
          Carp::carp("TermTitle is not supported on fish. See instead fish_title in the fish manual");
          return
      }
      # TODO use tsl/fsl from terminfo, if the terminfo definition has them
      # TODO Truncate to wsl
      # TODO check eslok and escape if necessary
      AngelPS1::Shell->ps1_invisible(TITLE_BEGIN, @_, TITLE_END)
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_PLUGIN_TERM

$fatpacked{"AngelPS1/Plugin/Term/Size.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_PLUGIN_TERM_SIZE';
  use strict;
  use warnings;
  
  package AngelPS1::Plugin::Term::Size;
  
  our $VERSION = $AngelPS1::VERSION;
  
  use Exporter 5.57 ();
  our @ISA = 'Exporter';
  our @EXPORT = qw($LINES $COLUMNS);
  
  our ($LINES, $COLUMNS);
  
  # Get the ioctl number
  my $TIOCGWINSZ =
      # Shortcut static table
      {
          # $^O => ioctl TIOCGWINSZ constant
          linux => 0x5413,
      }->{$^O}
  ||
      # Fallback: get the constant from ioctl.ph
      eval {
          package AngelPS1::Plugin::Term::Size::ioctl;
          require 'sys/ioctl.ph';
          delete $INC{'sys/ioctl.ph'};
          \&TIOCGWINSZ
      };
  
  
  my $_WINSZ = pack('S4');
  
  sub _update_from_ioctl
  {
      ioctl(STDERR, $TIOCGWINSZ, $_WINSZ);
      ($LINES, $COLUMNS) = unpack('S2', $_WINSZ);
  }
  
  my $TTYNAME;
  sub _update_from_stty
  {
      my $line = `stty -F $TTYNAME size`;
      ($LINES, $COLUMNS) = split / /, $line;
  }
  
  # TODO If sys/ioctl.ph is not available, try:
  # - Term::Size
  # - Term::ReadKey
  # - stty size
  # - hardcoded value of TIOCGWINSZ based on $^O
  # See also perlfaq8: How do I get the screen size?
  
  
  sub import
  {
      # Avoid multiple install due to multiple import from different packages
      unless ($SIG{WINCH}) {
          if (defined $TIOCGWINSZ) {
              # Terminal size change
              $SIG{WINCH} = \&_update_from_ioctl;
          } else {
              require POSIX;
              $TTYNAME = POSIX::ttyname(2); # STDERR
              $SIG{WINCH} = \&_update_from_stty;
          }
  
          # Fetch now
          $SIG{WINCH}->();
      }
  
      $_[0]->export_to_level(1, @_);
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_PLUGIN_TERM_SIZE

$fatpacked{"AngelPS1/Plugin/VCS.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_PLUGIN_VCS';
  use strict;
  use warnings;
  
  package AngelPS1::Plugin::VCS;
  
  use Exporter 'import';
  our @EXPORT = qw<VCSInfo>;
  
  sub _find_vcs_dir
  {
      my $dir = shift;
      my @stat = stat $dir;
      my $dev = $stat[0];
      while ($dir && $stat[0] == $dev) {
          if ($stat[3] > 3) {
              return (git => $dir) if -d "$dir/.git/objects";
              return (svn => $dir) if -f "$dir/.svn/entries";
              return (hg  => $dir) if -d "$dir/.hg/store";
              return (bzr => $dir) if -d "$dir/.bzr";
              return ('git-bare' => $dir) if substr($dir, -4) eq '.git' && -d "$dir/objects"
          }
          # go up
          substr($dir, 0, rindex($dir, '/'), '');
          @stat = stat $dir;
      }
      return
  }
  
  my %VCS = (
      git => [
          'AngelPS1/Plugin/Git.pm',
          sub {
              my ($state, $dir) = @_;
              $state->{GIT_DIR} = $dir;
              my @res = AngelPS1::Plugin::Git::GitInfo($state);
              delete $state->{GIT_DIR};
              @res
          }
      ],
  );
  
  sub VCSInfo
  {
      my $options = (@_ && ref($_[0]) eq 'HASH') ? (shift) : {};
      my @enabled_vcs = @_;
  
      sub {
          my $state = shift;
          my ($vcs, $dir) = _find_vcs_dir($state->{PWD});
          my $vcs_plugin = $VCS{$vcs};
          return unless defined $vcs_plugin;
  
          require $vcs_plugin->[0];
          return $vcs_plugin->[1]->($state, $dir)
      }
  }
  
  1;
  __END__
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_PLUGIN_VCS

$fatpacked{"AngelPS1/Prompt/Default.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_PROMPT_DEFAULT';
  use strict;
  use warnings;
  
  package AngelPS1::Prompt::Default;
  
  use AngelPS1::Shell ();
  use AngelPS1::Chrome;
  use AngelPS1::Plugin::Core;
  use AngelPS1::Plugin::DateTime;
  use AngelPS1::Plugin::Term;
  use AngelPS1::Plugin::Term::Size;
  use AngelPS1::Plugin::VCS;
  
  use POSIX ();
  
  (my $TTYNAME = POSIX::ttyname(0)) =~ s{^/dev/}{};
  
  return () unless AngelPS1::Shell->can('WorkingDir_Tilde')
                && AngelPS1::Shell->can('UserPrivSymbol');
  
  # The prompt is the list returned as the last statement
  (
      (
          AngelPS1::Shell->name eq 'fish'
          ? ()
          : TermTitle(
              (%AngelPS1::DEBUG
              ? (
                  AngelPS1::Shell->name,
                  ' ',
                  $TTYNAME,
                  ' (',
                  # Columns and lines are dynamic!
                  sub { "${COLUMNS}x${LINES}) " },
              ) : ()),
              AngelPS1::Shell->WorkingDir_Tilde,
          )
      ),
      # fish has its own special handling through the fish_title function
      Blue, [ Time ],
      ' ',
      # User name
      $< ? (scalar getpwuid $<) : (),
      sub { ((-w $_[0]->{PWD} ? Green : Red), [ ':' ]) },
      AngelPS1::Shell->WorkingDir_Tilde,
      ' ',
      VCSInfo,
      sub { my $err = $_[0]->{'?'}; $err == 0 ? () : (Red, [ $err ], ' ') },
      # User mark: root => #    else  $
      ($< ? (Bold, [ AngelPS1::Shell->UserPrivSymbol ]) : (Red + Bold, [ '#' ])),
      ' ',
  )
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_PROMPT_DEFAULT

$fatpacked{"AngelPS1/Shell.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SHELL';
  use strict;
  use warnings;
  
  package AngelPS1::Shell;
  
  my %ALIASES = (
      dash  => 'POSIX',
      ksh   => 'ksh93',
      # Not tested
      ksh88 => 'POSIX',
  );
  
  
  my $name;
  
  #
  # Call: AngelPS1::Shell->name
  #
  sub name
  {
      $name
  }
  
  #
  # Call: AngelPS1::Shell->use('bash')
  #
  sub use
  {
      my ($class, $shell) = @_;
      if ($shell) {
          $shell = $ALIASES{$shell} if exists $ALIASES{$shell};
          my $src = "AngelPS1/Shell/$shell.pm";
          unless (exists $INC{$src}) {
              # TODO try to distinguish load errors (file not found) from compile errors
              # by pushing a sub on @INC that will be called.
              die "$shell is not a supported shell.\n" unless eval { require $src };
          }
  
          # Make AngelPS1::Shell a sub class of the loaded module
          our @ISA = ("${class}::$shell");
          $name = $shell;
      }
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SHELL

$fatpacked{"AngelPS1/Shell/POSIX.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SHELL_POSIX';
  use strict;
  use warnings;
  
  package AngelPS1::Shell::POSIX;
  
  sub ps1_escape
  {
      (my $s = $_[1]) =~ s/!/!!/gs;
      $s =~ s{([\\\$`])}{\\$1}gs;
      $s
  }
  
  sub ps1_invisible
  {
      shift; # $class
      @_
  }
  
  sub ps1_finalize
  {
      $_[1]
  }
  
  sub ps1_function_name
  {
      my $angel_name = $_[1];
      # dash, (should check for the real POSIX shell) doesn't like '-' in function
      # names. Is it related to its name?
      $angel_name =~ s/-/_/g;
      "_${angel_name}_PS1"
  }
  
  sub ps1_time_debug
  {
      # Not supported
      ''
  }
  
  # The shell keyword used to declare a local variable
  # (ksh doesn't have 'local')
  sub shell_local
  {
      'local'
  }
  
  sub shell_code_dynamic
  {
      my ($class, %options) = @_;
      my ($DEBUG, $NAME, $IN, $OUT, $PID, $env) =
          @options{qw<debug name in out pid env>};
  
      my $function_name = $class->ps1_function_name($NAME);
      my $time_debug = $DEBUG->{'time'} ? $class->ps1_time_debug : '';
      my $local = $class->shell_local;
  
      # The shell code will be evaluated with eval as a single line
      # so statements must be properly terminated with ';'
      # No shell comments allowed
      <<EOF;
  [ -n "\$APS1_NAME" ] && \$APS1_NAME leave;
  APS1_PS1="\$PS1";
  $function_name()
  {
      $local err=\$?;
      [ -e '$IN' ] || { eval "echo '\$APS1_PS1'"; $NAME leave ; return ; };
      printf '%s\\0%s' "?=\$err" "PWD=\$PWD" > '$IN' || { eval "echo '\$APS1_PS1'"; $NAME leave ; return ; };
      cat $OUT || $NAME leave ;
  } ;
  PS1='\$($time_debug$function_name)' ;
  APS1_NAME=$NAME ;
  APS1_PID=$PID ;
  $NAME()
  {
      case "\$1" in
      leave|quit|go-away)
          PS1="\$APS1_PS1" ;
          kill \$APS1_PID 2>/dev/null ;
          rm -f -- '$IN' '$OUT' ;
          unset APS1_PS1 APS1_PID APS1_NAME ;
          unset -f -- $NAME $function_name ;;
      mute|off)
          PS1="\$APS1_PS1" ;;
      unmute|on)
          PS1='\$($time_debug$function_name)' ;;
      *)
          echo 'usage: $NAME [quit|mute|off|unmute|on]' >&2 ;
          return 1 ;;
      esac ;
  } ;
  trap '$NAME leave' EXIT ;
  EOF
  }
  
  sub WorkingDir
  {
      sub {
          $_[0]->{'PWD'}
      }
  }
  
  sub WorkingDir_Tilde
  {
      my $home = $ENV{'HOME'};
      sub {
          my $pwd = $_[0]->{'PWD'};
          $pwd =~ s{^$home(/|$)}{~$1}s;
          $pwd
      }
  }
  
  sub Hostname
  {
      require Sys::Hostname;
      Sys::Hostname::hostname()
  }
  
  sub UserPrivSymbol
  {
      \( $< ? '$' : '#' )
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SHELL_POSIX

$fatpacked{"AngelPS1/Shell/bash.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SHELL_BASH';
  use strict;
  use warnings;
  
  package AngelPS1::Shell::bash;
  
  
  sub ps1_escape
  {
      (my $s = $_[1]) =~ s{([\\\$`])}{\\$1}gs;
      $s =~ s{\n}{\\012}gs;
      $s
  }
  
  sub ps1_invisible
  {
      shift; # $class
      (\'\[', @_, \'\]')
  }
  
  
  sub ps1_finalize
  {
      # Escape the first and last space using bash PS1 encoding as 'read' removes spaces
      # at beginning and end of line
      (my $PS1 = $_[1]) =~ s/^ | $/\\040/g;
      # Escape \ as 'read' expands them
      $PS1 =~ s/\\/\\\\/g;
      # Escape newlines
      $PS1 =~ s/\n/\\\n/g;
      "$PS1\n"
  }
  
  sub shell_code_static
  {
      my ($class, $PS1, %options) = @_;
      qq{[[ -n "\$APS1_NAME" ]] && \$APS1_NAME leave; PS1='$PS1'\n}
  }
  
  # Returns the code to send to the shell
  sub shell_code_dynamic
  {
      my ($class, %options) = @_;
      my ($DEBUG, $NAME, $IN, $OUT, $PID, $env) =
          @options{qw<debug name in out pid env>};
  
      my $shell_debug = $DEBUG->{'in'} ? q|printf 'DEBUG> PS1=%q\\n' "$PS1" ; | : '';
      my $time_debug = $DEBUG->{'time'} ? q|time | : '';
  
      # The shell code will be evaluated with eval as a single line
      # so statements must be properly terminated with ';'
      # No shell comments allowed
      <<EOF;
  [[ -n "\$APS1_NAME" ]] && \$APS1_NAME leave;
  APS1_PS1="\$PS1";
  APS1_PROMPT_COMMAND="\$PROMPT_COMMAND";
  -angel-PS1()
  {
      local err=\$?;
      [[ -e '$IN' ]] || { $NAME leave ; return ; };
      printf '%s\\0%s' "?=\$err" "PWD=\$PWD" > '$IN' || { $NAME leave ; return ; };
      read PS1 < '$OUT' || $NAME leave ;
      $shell_debug
  } ;
  PROMPT_COMMAND='${time_debug}-angel-PS1' ;
  APS1_NAME=$NAME ;
  APS1_PID=$PID ;
  $NAME()
  {
      case "\$1" in
      leave|quit|go-away)
          PROMPT_COMMAND="\$APS1_PROMPT_COMMAND" ;
          PS1="\$APS1_PS1" ;
          kill \$APS1_PID 2>/dev/null ;
          rm -f -- '$IN' '$OUT' ;
          unset APS1_PS1 APS1_PID APS1_NAME ;
          unset -f -- $NAME -angel-PS1 ;;
      mute|off)
          PROMPT_COMMAND="\$APS1_PROMPT_COMMAND" ;
          PS1="\$APS1_PS1" ;;
      unmute|on)
          PROMPT_COMMAND=-angel-PS1 ;;
      *)
          echo 'usage: $NAME [quit|mute|off|unmute|on]' >&2 ;
          return 1 ;;
      esac ;
  } ;
  trap '$NAME leave' EXIT ;
  EOF
  
  }
  
  
  sub WorkingDir
  {
      \'$PWD'
  }
  
  sub WorkingDir_Tilde
  {
      \'\w'
  }
  
  sub Hostname
  {
      \'h'
  }
  
  sub UserPrivSymbol
  {
      \'\$'
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SHELL_BASH

$fatpacked{"AngelPS1/Shell/fish.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SHELL_FISH';
  use strict;
  use warnings;
  
  package AngelPS1::Shell::fish;
  
  sub ps1_escape
  {
      # Do nothing
      $_[1]
  }
  
  sub ps1_invisible
  {
      shift; # $class
      # Do nothing
      @_
  }
  
  sub ps1_finalize
  {
      # Do nothing
      $_[1]
  }
  
  
  sub shell_code_dynamic
  {
      my ($class, %options) = @_;
      my ($DEBUG, $NAME, $IN, $OUT, $PID, $env) =
          @options{qw<debug name in out pid env>};
  
      # The shell code will be evaluated with eval as a single line
      # so statements must be properly terminated with ';'
      # No shell comments allowed
  
      #set err \$status;
      #if test ! -e '$IN'; $NAME leave; fish_prompt; return; end;
      #if ! printf '%s\\0%s' "?=\$err" "PWD=\$PWD" > '$IN'; $NAME leave; fish_prompt; return; end;
      <<EOF;
  if test -n "\$APS1_NAME"; eval \$APS1_NAME leave; end;
  set -g aps1_prompt_orig (functions fish_prompt | sed 's/#[^'\\''"]*\$//;s/\$/;/');
  function fish_prompt;
      set _err \$status;
      if test ! -e '$IN'; $NAME leave; fish_prompt; return; end;
      /usr/bin/printf '%s\\0%s' "?=\$_err" "PWD=\$PWD" > '$IN';
      cat '$OUT';
  end;
  set -g aps1_prompt (functions fish_prompt | sed '1s/fish_prompt/fish_prompt;/');
  function $NAME;
      switch "\$argv[1]";
      case quit;
          $NAME leave;
      case leave;
          kill \$APS1_PID 2>/dev/null;
          rm -f -- '$IN';
          set -e -g APS1_PID;
          set -e -g APS1_NAME;
          set -e -g aps1_prompt;
          functions -e fish_prompt $NAME;
          complete -c $NAME -e;
          eval "\$aps1_prompt_orig";
          set -e -g aps1_prompt_orig;
      case mute;
          $NAME off;
      case off;
          eval "\$aps1_prompt_orig";
          complete -c $NAME -e;
          complete -c $NAME -A -f -a 'quit on';
      case unmute;
          $NAME on;
      case on;
          eval "\$aps1_prompt";
          complete -c $NAME -e;
          complete -c $NAME -A -f -a 'quit off';
      case '*';
          echo 'usage: $NAME [quit|mute|off|unmute|on]' >&2;
          return 1;
      end;
  end;
  complete -c $NAME -A -f -a 'quit off';
  set -g APS1_PID $PID;
  set -g APS1_NAME '$NAME';
  EOF
  }
  
  sub WorkingDir
  {
      sub {
          $_[0]->{'PWD'}
      }
  }
  
  sub WorkingDir_Tilde
  {
      my $home = $ENV{'HOME'};
      sub {
          my $pwd = $_[0]->{'PWD'};
          $pwd =~ s{^$home(/|$)}{~$1}s;
          $pwd
      }
  }
  
  sub Hostname
  {
      require Sys::Hostname;
      Sys::Hostname::hostname()
  }
  
  sub UserPrivSymbol
  {
      \( $< ? '$' : '#' )
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SHELL_FISH

$fatpacked{"AngelPS1/Shell/ksh93.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SHELL_KSH93';
  use strict;
  use warnings;
  
  package AngelPS1::Shell::ksh93;
  
  use AngelPS1::Shell::POSIX ();
  our @ISA = ('AngelPS1::Shell::POSIX');
  
  # ksh93 doesn't have 'local'
  sub shell_local
  {
      'typeset'
  }
  
  # Contrary to mksh documentation, ks93 (at least as packaged on
  # Ubuntu as version 93u-1) does not support the "\001\r" trick
  # So we do not overload ps1_invisible
  
  
  # Called from AngelPS1::Shell::POSIX->shell_code_dynamic
  sub ps1_time_debug
  {
      # Note that "time -- " doesn't work (/usr/bin/time is used in that case)
      q|time |;
  }
  
  sub shell_code_dynamic
  {
      my $class = shift;
      my $shell_code = $class->SUPER::shell_code_dynamic(@_);
      # Replace [ ... ] (external 'test' command) with [[ ... ]] (internal)
      $shell_code =~ s{([\[\]])}{$1$1}g;
      return $shell_code
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SHELL_KSH93

$fatpacked{"AngelPS1/Shell/mksh.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SHELL_MKSH';
  use strict;
  use warnings;
  
  package AngelPS1::Shell::mksh;
  
  use AngelPS1::Shell::POSIX ();
  our @ISA = ('AngelPS1::Shell::POSIX');
  
  
  use constant INVIS_CHAR => "\x01";
  
  sub ps1_escape
  {
      (my $s = $_[1]) =~ s/!/!!/gs;
      $s =~ s{([\\\$`])}{\\$1}gs;
      # TODO remove INVIS_CHAR
      $s
  }
  
  sub ps1_invisible
  {
      return if @_ == 1;
      shift; # $class
      my $invis = INVIS_CHAR;
      return (\$invis, @_, \$invis)
  }
  
  sub ps1_finalize
  {
      my $PS1 = $_[1];
      if (index($PS1, INVIS_CHAR) >= 0) {
          # Remove useless leave/enter invisible mode
          my $inv = INVIS_CHAR;
          $PS1 =~ s/\Q$inv$inv//g;
          # Insert the special sequence that tells the invisible mode marker
          substr $PS1, 0, 0, INVIS_CHAR . "\r";
      }
      $PS1
  }
  
  sub ps1_function_name
  {
      '-angel-PS1'
  }
  
  sub ps1_time_debug
  {
      q|time -- |;
  }
  
  sub shell_code_dynamic
  {
      my $class = shift;
      my $shell_code = $class->SUPER::shell_code_dynamic(@_);
      # Replace [ ... ] (external 'test' command) with [[ ... ]] (internal)
      $shell_code =~ s{([\[\]])}{$1$1}g;
      return $shell_code
  }
  
  sub shell_code_static
  {
      my ($class, $PS1, %options) = @_;
      qq{[[ -n "\$APS1_NAME" ]] && \$APS1_NAME leave; PS1='$PS1'\n}
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SHELL_MKSH

$fatpacked{"AngelPS1/Shell/tcsh.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SHELL_TCSH';
  use strict;
  use warnings;
  
  package AngelPS1::Shell::tcsh;
  
  
  sub ps1_escape
  {
      # csh special symbols
      (my $s = $_[1]) =~ s{%}{%%}gs;
      # csh special sequences for special chars, à la bindkey
      $s =~ s{\\}{\\\\}gs;
      $s =~ s{\^}{\\136}gs;
      # csh special: history number
      $s =~ s{!}{\\041}gs;
      # \n must be escaped as tcsh replaces it with space in backquote (`) output
      $s =~ s{\n}{\\n}gs;
      #print STDERR "Escape [$_[1]] => [$s]\n";
      $s
  }
  
  sub ps1_invisible
  {
      shift; # $class
      (\'%{', @_, \'%}')
  }
  
  sub ps1_finalize
  {
      my $prompt = $_[1];
      $prompt =~ s/'/'\\''/g;
      # tcsh replaces '\n' with a space in command substitution (backquotes: `)
      # so '\n' will be lost in our current implementation
      # TODO: try to replace with '\\n'
      warn "Prompt has '\\n' This is not supported by angel-PS1!" if $prompt =~ /\n/;
      qq{set prompt = '$prompt'};
  }
  
  sub shell_code_dynamic
  {
      my ($class, %options) = @_;
      my ($DEBUG, $NAME, $IN, $OUT, $PID, $env) =
          @options{qw<debug name in out pid env>};
  
      # Reference for this csh shit:
      # - http://www.grymoire.com/Unix/CshTop10.txt
      # - http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/
  
      my $shell_code = <<EOF;
  if ( \${?aps1_name} ) then
      eval \$aps1_name leave
  endif
  set aps1_prompt = \$prompt:q
  set aps1_precmd = 'if ( -p $IN ) then\\
      echo -n "?=\$?:q\\0PWD=\$PWD:q" > $IN\\
      eval "`cat $OUT`"\\
  else\\
      $NAME leave\\
  endif'
  alias precmd \$aps1_precmd:q
  alias $NAME 'switch ( \\!* )\\
      case leave:\\
      case quit:\\
          set prompt = "\$aps1_prompt:q"\\
          kill \$aps1_pid\\
          rm -f -- $IN $OUT\\
          unset aps1_prompt aps1_pid aps1_name aps1_precmd\\
          unalias precmd $NAME\\
          breaksw\\
      case off:\\
      case mute:\\
          unalias precmd\\
          set prompt = \$aps1_prompt:q\\
          breaksw\\
      case on:\\
      case unmute:\\
          alias precmd \$aps1_precmd:q\\
          :\\
          breaksw\\
      default:\\
          echo "$NAME: unknown option"\\
          echo "usage: $NAME [quit|mute|off|unmute|on]"\\
          breaksw\\
  endsw'
  set aps1_name = '$NAME'
  set aps1_pid = '$PID'
  EOF
  # For debugging
  #alias $NAME-kill 'set prompt = \$aps1_prompt:q; kill \$aps1_pid >/dev/null; unset aps1_prompt aps1_pid aps1_name aps1_precmd; unalias precmd $NAME $NAME-kill; :'
  
      # Inside backquotes (`) output \n are replaced with spaces by tcsh
      # So switch/if can not work.
      # Workaround: save the shell code to a file, and source it.
      require POSIX;
      my $file = POSIX::tmpnam()."$$.tcsh";
      # TODO encoding, as the angel name may not be ascii
      open my $f, '>', $file;
      print $f $shell_code;
      close $f;
  
      # Return value, passed as the eval argument
      # aps1_pid assignment will be concatenated
      #"cat $file; " . # For debugging
      "source $file; rm -f $file"
  }
  
  sub WorkingDir
  {
      \'%/'
  }
  
  sub WorkingDir_Tilde
  {
      \'%~'
  }
  
  sub Hostname
  {
      \'%h'
  }
  
  sub UserPrivSymbol
  {
      # The 'promptchars' variable defines exactly what will be displayed
      \'%#'
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SHELL_TCSH

$fatpacked{"AngelPS1/System.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SYSTEM';
  use strict;
  use warnings;
  
  package AngelPS1::System;
  
  my %ALIASES;
  
  sub use
  {
      my ($class, $system) = @_;
      $system ||= $^O;
  
      $system = $ALIASES{$system} if exists $ALIASES{$system};
      my $src = "AngelPS1/System/$system.pm";
      require $src;
      our @ISA = ("${class}::$system");
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SYSTEM

$fatpacked{"AngelPS1/System/linux.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_SYSTEM_LINUX';
  use strict;
  use warnings;
  
  package AngelPS1::System::linux;
  
  sub nproc
  {
      # Alternative: grep '^processor\t' /proc/cpuinfo
  
      my $nproc = `nproc`;
      return if $? < 0;
      return if $? & 127;
      chomp $nproc;
      $nproc
  }
  
  sub loadavg
  {
      open my $proc_loadavg, '<', '/proc/loadavg' or die;
      my $loadavg = readline $proc_loadavg;
      substr($loadavg, index($loadavg, ' '), length $loadavg, '');
      $loadavg
  }
  
  sub _slurp_line
  {
      open my $f, '<', $_[0]
          or return;
      my $line = readline $f;
      chomp $line;
      $line
  }
  
  # If batteries found, returns a closure that returns 2 values:
  # - the battery level as a float between 0 and 1
  # - a boolean; 1 if charging, else discharging
  sub fetch_battery
  {
      # List devices
      opendir my $power_devices, '/sys/class/power_supply'
          or return;
      my @batteries =
          map { "/sys/class/power_supply/$_" }
          grep { index($_, 'BAT') == 0 }
          readdir $power_devices;
      close $power_devices;
      return unless @batteries;
      if (@batteries != 1) {
          warn "only one battery supported. Patch welcome!"
      }
      my $bat = shift @batteries;
  
      # Sub that will query the battery status
      return sub {
          my $charge_full = _slurp_line("$bat/charge_full") or return;
          my $charge_now = _slurp_line("$bat/charge_now") or return;
          my $status = _slurp_line("$bat/status") or return;
          return ($charge_now / $charge_full, $status ne 'Discharging');
      }
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_SYSTEM_LINUX

$fatpacked{"AngelPS1/TermInfo.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_TERMINFO';
  use strict;
  use warnings;
  
  package AngelPS1::TermInfo;
  
  use Exporter 'import';
  our @EXPORT_OK = qw<terminfo setaf>;
  
  use AngelPS1::Util 'run';
  
  sub terminfo ($;@); # Pre-declare for recursion
  
  my %terminfo_cache;
  
  sub terminfo ($;@)
  {
      my ($capability, @args) = @_;
      if (ref $capability) {
          my $cap0 = $capability->[0];
          if (exists $terminfo_cache{"\0$cap0"}) {
              $capability = $terminfo_cache{"\0$cap0"}
          } else {
              for my $cap (@$capability) {
                  my $res = terminfo $cap, @args;
                  next if $res eq '';
                  $terminfo_cache{"\0$cap0"} = $cap if $cap ne $cap0;
                  return $res
              }
              return '';
          }
      }
  
      my $query = join("\0", $capability, @args);
      return $terminfo_cache{$query} if exists $terminfo_cache{$query};
  
      my $result = run(tput => $capability, @args);
  
      # Cache the result
      $terminfo_cache{$query} = $result;
  
      $result
  }
  
  sub setaf ($) { terminfo [ qw(setaf AF) ], $_[0] }
  
  # our ($BLACK, $RED, $GREEN, $YELLOW, $BLUE, $MAGENTA, $CYAN, $GRAY) =
  #    map { setaf $_ } 0..7;
  # our $BOLD = terminfo [ qw(bold md) ];
  # our $NO_COLOR = terminfo [ qw(sgr0 me) ];
  
  1;
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_TERMINFO

$fatpacked{"AngelPS1/Util.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ANGELPS1_UTIL';
  use strict;
  use warnings;
  
  package AngelPS1::Util;
  
  use Exporter 'import';
  our @EXPORT_OK = qw<which run one_line>;
  
  use IPC::Open3 ();
  use Symbol 'gensym';
  
  
  {
      my @PATH;
      BEGIN { @PATH = split /:/, $ENV{'PATH'}; }
      my %which;
  
      sub which ($)
      {
          my ($name, $no_cache) = @_;
  
          # Use the cache
          return $which{$name} if exists $which{$name};
          # Already a path with a directory?
          return $name if index($name, '/') >= 0;
  
          # Search in $PATH
          foreach my $p (@PATH) {
              my $f = "$p/$name";
              if (-x $f && ! -d _) {
                  $which{$name} = $f unless $no_cache;
                  return $f;
              }
          }
          die "$name: not found";
      }
  }
  
  sub run
  {
      my $command = which(shift);
      my ($in, $out);
      my $err = gensym;
      my $pid = IPC::Open3::open3(
          $in,
          $out,
          $err,
          $command,
          @_
      );
      my $result = do { undef $/; readline $out };
      # TODO UTF-8 decoding
      waitpid($pid, 0);
      return $result
  }
  
  sub one_line
  {
      # chop
      (my $result = shift) =~ s{\n$}{}s;
      $result
  }
  
  '$';
  # vim:set et ts=8 sw=4 sts=4:
ANGELPS1_UTIL

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
     if (my $fat = $_[0]{$_[1]}) {
       return sub {
         return 0 unless length $fat;
         $fat =~ s/^([^\n]*\n?)//;
         $_ = $1;
         return 1;
       };
     }
     return;
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

use utf8;

#    Copyright © 2013 Olivier Mengué
#    Original source code is available at https://github.com/dolmen/angel-PS1
#
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.



use 5.008003;  # 5.010 is the sane minimum
use strict;
use warnings;

use AngelPS1; # Load $VERSION

package AngelPS1;

use Getopt::Long qw(:config posix_default no_ignore_case auto_help);
use POSIX ();
use Encode ();
use FindBin;

# TODO ./dist should inline those modules
use AngelPS1::Shell ();
use AngelPS1::Compiler;
use AngelPS1::Chrome qw<Red Yellow Bold Reset>;

# http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
use lib (exists $ENV{XDG_CONFIG_HOME} ? "$ENV{XDG_CONFIG_HOME}/angel-PS1" : "$ENV{HOME}/.config/angel-PS1"),
        '/etc/xdg/angel-PS1';


# Extract encoding name from the locale
our $ENCODING = do {
    # Shortcut for the most common case
    my $locale = $ENV{LC_ALL} || $ENV{LC_CTYPE} || $ENV{LANG} || 'POSIX';
    $locale =~ /\.UTF-?8(?:@.*)?$/i
        ? 'UTF-8'
        : do {
            # warn "slow locale lookup...";
            POSIX::setlocale(POSIX::LC_CTYPE(), '');
            require I18N::Langinfo;
            eval { I18N::Langinfo::langinfo(I18N::Langinfo::CODESET()) }
                or do { warn $@; undef }
        }
};

# Decode @ARGV and encode STDOUT, STDERR
if ($ENCODING) {
    my $encoding_obj = Encode::find_encoding($ENCODING);
    map { $_ = $encoding_obj->decode($_) } @ARGV;
    binmode(STDOUT, ":encoding($ENCODING)");
    binmode(STDERR, ":encoding($ENCODING)");
}

our $APP = !defined scalar caller;  # Running as command or include
$main::VERSION = our $VERSION if $APP;

our %DEBUG;
# Initialize from $ENV{APS1_DEBUG}
BEGIN {
    my @DEBUG_DEFAULTS = qw< in time >;

    sub _DEBUG
    {
        # $value is in $_[1] (instead of $_[0]) to be compatible with GetOptions
        # callback
        my $value = $_[1];
        if ($value eq '' || $value eq '1') {
            $DEBUG{$_} = 1 for @DEBUG_DEFAULTS
        } else {
            my @debug = split /,/, $value;
            splice(@debug, 0, 1, @DEBUG_DEFAULTS) if $debug[0] eq '';
            $DEBUG{$_} = 1 for @debug
        }
    }

    _DEBUG(undef, $ENV{APS1_DEBUG})
        if defined $ENV{APS1_DEBUG} && length $ENV{APS1_DEBUG};
}

our $SHELL;
our $NAME = 'angel';
our $VERBOSE = 0;
our $SHELL_PID = getppid();
our $TERM = $ENV{TERM};
my ($CONFIG, $PROMPT);
my $RUN_TEST;



$SIG{__DIE__} = sub {
    return if $^S;
    if (-t STDERR) {
        my $last = pop @_;
        $last =~ s/(\n)$//s;
        die((Red+Reset)->term, "$FindBin::Script: ", @_, $last, Reset->term, ($1 ? ($1) : ()));
    } else {
        die "$FindBin::Script: ", @_;
    }
};

if (-t STDERR) {
    my $YellowBold = (Yellow+Bold)->term;
    my $Reset = Reset->term;
    $SIG{__WARN__} = sub {
        my $last = pop;
        $last =~ s/(\n)$//s;
        warn $YellowBold, @_, $last, $Reset, ($1 ? ($1) : ());
    };
}



my @INCLUDES;

GetOptions(
    'version' => sub { print "angel-PS1 $VERSION\n"; exit 0 },
    'test+'    => \$RUN_TEST,
    'shell=s' => \$SHELL,
    'name=s' => \$NAME,
    'c|config=s' => \$CONFIG,
    'p|prompt=s' => \$PROMPT,
    'v|verbose' => \$VERBOSE,
    'q|quiet' => sub { $VERBOSE = -1 },
    'debug:s'  => \&_DEBUG,
    'I=s' => \@INCLUDES,
);

# Order is important: preserve the order as perl itself
lib->import(@INCLUDES);
undef @INCLUDES;

unless ($SHELL) {
    require AngelPS1::Util;
    # Extract the name of $PPID
    my $comm_file = "/proc/$SHELL_PID/comm";
    if (-f $comm_file && -r _) { # Linux shortcut
        open my $comm, '<', $comm_file;
        $SHELL = <$comm>
    } else {
        $SHELL = AngelPS1::Util::run(ps => qw(-o comm=), $SHELL_PID)
    }
    $SHELL = AngelPS1::Util::one_line($SHELL);
}

# Dynamically load our shell plugin
AngelPS1::Shell->use($SHELL);

# The angel name must be a valid shell function identifier
# Note that '-' is allowed, even as a first char
$NAME =~ /^[-A-Z_][-A-Z_0-9]*$/si or die "invalid angel name";



my @PS1;

# Load the configuration from @INC
{
    my @configs;

    if (defined $PROMPT) {
        (my $mod = "AngelPS1/Prompt/$PROMPT.pm") =~ s{::}{/};
        push @configs, $mod, "$PROMPT.PS1";
    } elsif ($CONFIG) {
        push @configs, $CONFIG;
    } else {
        # Usually: $HOME/.config/angel-PS1/angel.PS1
        push @configs, "AngelPS1/Prompt/$NAME.pm", "$NAME.PS1", 'AngelPS1/Prompt/Default.pm';
    }

    undef $CONFIG;
    foreach my $config (@configs) {
        undef $!;
        @PS1 = do { package AngelPS1::Prompt; do $config };
        die "load error: $@" if $@;
        unless ($!) {
            # Break if loading is ok
            $CONFIG = ref($INC{$config}) ? $config : $INC{$config};
            last;
        }
        warn "$config load error: $!" if $! && $DEBUG{config};
        $CONFIG = $config;
    }
    die "$CONFIG load error: $!" if $!;
}

die "invalid prompt value returned by $CONFIG: empty list\n" unless @PS1;
die "invalid prompt value returned by $CONFIG: undef value\n" unless defined $PS1[0];

print STDERR "${NAME}'s config: $CONFIG\n" if $DEBUG{config};


@PS1 = reduce @PS1;


# Build the FIFO paths
my $FIFO_PATH = POSIX::tmpnam().".$NAME-$$";
my $FIFO_IN = "$FIFO_PATH.in";
my $FIFO_OUT = "$FIFO_PATH.out";

if ($RUN_TEST || -t STDOUT) {
    die "TERM is not set\n" unless exists $ENV{'TERM'} && $ENV{'TERM'} ne '';

    unless ($ENCODING) {
        warn "Encoding not set in locale. Please set LC_CTYPE.\n";
    } elsif ($ENCODING !~ /^UTF-/i) {
        # Get the canonical name
        $ENCODING = Encode::find_encoding($ENCODING)->name;
        warn "Your locale is not set to a known Unicode encoding (such as 'UTF-8') but to '$ENCODING'. Please report your use case to the Angel PS1 developers.\n"
    }

    if ($RUN_TEST) {
        require Cwd;
        my @x = reduce(expand({ '?' => 0, PWD => Cwd::cwd() }, @PS1));
        print AngelPS1::Shell->ps1_finalize(scalar reduce(@x)), "\n"
            if $RUN_TEST > 1;
        exit 0;
    }

    #print Red, "Red!", Reset, "\n";

    print "angel-PS1 $VERSION\n";

    my $script = index($0, '/') >= 0 ? $0 : "\$(which $FindBin::Script)";
    print "Copyright (C) 2013  Olivier Mengué\n",
          "This program comes with ABSOLUTELY NO WARRANTY;\n",
          "This is free software, and you are welcome to redistribute it\n",
          "under certain conditions;\n",
          "Run \"sed -n '2,19{s/.//;p}' $script | iconv -f UTF-8\" for details.\n\n";
    print STDERR "usage: eval `$0`\n\nSee 'perldoc angel-PS1' for detailed help.\n";

    #print 'Running as an app: ', $APP, "\n";
    #print "\$Bin: $FindBin::Bin\n";
    #print "\$Script: $FindBin::Script\n";
    #print '__FILE__: ', __FILE__, "\n";
    #print "\%INC:\n  - ", join("\n  - ", sort keys %INC), "\n";
    #print "\@INC:\n  - ", join("\n  - ", @INC), "\n";

    exit 1;
}

# *****************************************************************************
# Angel startup
# *****************************************************************************

# No terminal? This is not an interactive shell.
# So we don't install.
exit 0 unless -t STDIN && exists $ENV{'TERM'} && $ENV{'TERM'} ne '';

# If the prompt is static after reduce(), just output it and don't install the
# angel. This allows the user to use the power of the angel-PS1 prompt compiler
# and plugins without the runtime cost.
if (ps1_is_static(\@PS1)
    and my $shell_code_static = AngelPS1::Shell->can('shell_code_static')) {

    (my $PS1 = ${$PS1[0]}) =~ s/'/'\\''/g;

    print AngelPS1::Shell->$shell_code_static(
        $PS1,
        name  => $NAME,
        debug => \%DEBUG,
    );

    exit 0
}


POSIX::mkfifo($FIFO_IN, 0600) or die "Can't create fifo $FIFO_IN: $!";
POSIX::mkfifo($FIFO_OUT, 0600) or die "Can't create fifo $FIFO_OUT: $!";
-p $FIFO_IN && -o _ or die "Fifo $FIFO_IN creation failed.";
-p $FIFO_OUT && -o _ or die "Fifo $FIFO_OUT creation failed.";

my $child = fork();
die if $child == -1;
if ($child) {
    print AngelPS1::Shell->shell_code_dynamic(
        name  => $NAME,
        debug => \%DEBUG,
        in    => $FIFO_IN,
        out   => $FIFO_OUT,
        env   => [qw< PWD >],
        pid   => $child,
    );

    print STDERR "$NAME installed.\n" unless $VERBOSE < 0;

    # We don't want the fifos to be removed by the END block
    undef $FIFO_IN;
    undef $FIFO_OUT;

    exit 0;
}

# *****************************************************************************
# Angel forked
# *****************************************************************************

$0 = qq{$FindBin::Script $NAME};

open STDIN, '+<', '/dev/null';
close STDOUT;
open STDOUT, '>', '/dev/null';


# Ignore ^C sent to the terminal
$SIG{INT} = 'IGNORE';
# Clean exits that will call our END block
$SIG{HUP} = $SIG{TERM} = sub { exit 0 };



# PS1 fallback, if something goes wrong with the user defined prompt
my $PS1_fallback = do {
    my @fallback = reduce(
        "[$NAME sick!] ",
        AngelPS1::Shell->WorkingDir,
        AngelPS1::Shell->UserPrivSymbol,
        ' ',
    );

        ps1_is_static(\@fallback)
    ? do { my $fallback = ${$fallback[0]}; sub { $fallback } }
    : sub { scalar reduce(expand(@_, @fallback)) }
};


# *****************************************************************************
# Angel main loop
# *****************************************************************************
sub main_loop
{
    my @PS1 = @_;

    my $FIFO;
    my %prompt_state;
    require Cwd;
    my $old_cwd = Cwd::getcwd();
    my ($k, $v);
    my ($open_in, $open_out) = (
        "<:encoding($ENCODING)",
        ">:encoding($ENCODING)",
    );

    for (;;) {
        unless (open $FIFO, $open_in, $FIFO_IN) {
            redo if -e $FIFO_IN && -p _;
            last;
        }
        $_ = do { undef $/; <$FIFO> };
        close $FIFO;
        printf STDERR "DEBUG< %s\n", do { (my $tmp = $_) =~ s/\0/ /g; $tmp } if $DEBUG{'in'};

        #my @shell_keys;
        foreach (split /\0/) {
            ($k, $v) = m/^(.*?)=(.*)/s;
            #push @shell_keys, $k;
            $prompt_state{$k} = $v;
        }

        chdir $prompt_state{'PWD'} if $prompt_state{'PWD'} ne $old_cwd;

        my $PS1 = eval { reduce(expand(\%prompt_state, @PS1)) };
        unless (defined $PS1) {
            (my $err = $@) =~ s/\s*$//s;
            print STDERR ((Red + Bold)->term, $NAME, " PS1 eval: ", $err, Reset->term, "\n");
            $PS1 = $PS1_fallback->(\%prompt_state);
        }

        open $FIFO, $open_out, $FIFO_OUT;
        print $FIFO AngelPS1::Shell->ps1_finalize($PS1);
        close $FIFO;

        # Cleanup for next iteration, but so far the keys of shell_state
        # are always the same
        #delete @prompt_state{@shell_keys};
    }
}

main_loop(@PS1);

END {
    no warnings 'uninitialized';
    unlink $FIFO_IN, $FIFO_OUT;
}

__END__

=encoding utf-8

=head1 NAME

angel-PS1 - The Angel's Prompt

=head1 SYNOPSIS

Install a prompt (bash/mksh/dash/tcsh/ksh93):

    eval `angel-PS1 [--name <name>] [-I <dir>] [-p <prompt> | -c <config>]`

Install a prompt (fish):

    eval (angel-PS1 [--name <name>] [-I <dir>] [-p <prompt> | -c <config>])

Test a prompt definition (check that it can be compiled):

    angel-PS1 [--name <name>] [-I <dir>] [-p <prompt> | -c <config>]
              [--shell <shell>] --test

=head1 CONFIGURATION

The default prompt definition comes from C<AngelPS1::Prompt::Default> that is
embeded in C<angel-PS1>.

You can use your own prompt definition defined in a file.

The prompt definition is searched as a file in perl's standard C<@INC> to which
F<$XDG_CONFIG_DIR/angel-PS1> (with fallback to F<$HOME/.config/angel-PS1>)
and F</etc/xdg/angel-PS1> have been preprended. See option C<-I> to prepend
more paths.

The following settings are used to determine the path/name of the file relative
to an C<@INC> directory (I<C<$ANGEL>> is the name of the angel (see the
C<--name> option, C<angel> is the default):

=over 4

=item *

if I<C<$PROMPT>> is set with the C<--prompt> option:

=over 4

=item -

the C<AngelPS1::Prompt::I<$PROMPT>> perl module:
F<AngelPS1/Prompt/I<$PROMPT>.pm>

=item -

the F<I<$PROMPT>.PS1> file

=back

=item *

if C<--config I<$CONFIG>> option is given, the F<I<$CONFIG>> file

=item *

the C<AngelPS1::Prompt::I<$NAME>> perl module:
F<AngelPS1/Prompt/I<$NAME>.pm>

=item *

the F<I<$NAME>.PS1> file

=back

=head1 SHELLS

angel-PS1 is compatible with:

=over 4

=item *

bash

=item *

mksh

=item *

dash

=item *

fish

=back

=head1 SUPPORT

Announces of new releases: L<https://twitter.com/nglPS1>

Bug tracker: L<https://github.com/dolmen/angel-PS1/issues>

Interactive support using IRC: L<irc://irc.perl.org#angel-PS1>

=head1 AUTHOR

Olivier Mengué, L<mailto:dolmen@cpan.org>

=head1 COPYRIGHT & LICENSE

See the header of this file.

=cut

# vim:set et ts=8 sw=4 sts=4:
